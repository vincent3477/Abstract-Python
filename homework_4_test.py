# -*- coding: utf-8 -*-
"""Homework_4_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FrfOPV17CqbE2xHv9oS7SsXkF-5RbzO7

Before you turn this problem in, make sure everything runs as expected. First, **restart the kernel** (in the menubar, select Kernel$\rightarrow$Restart) and then **run all cells** (in the menubar, select Cell$\rightarrow$Run All).

Make sure you fill in any place that says `YOUR CODE HERE` or "YOUR ANSWER HERE", as well as your name and collaborators below:
"""

NAME = "Vincent Siu"
COLLABORATORS = ""

"""---

# CSE 30 Fall 2021 - Homework 4


### Instructions

Please disregard the YOUR NAME and COLLABORATORS above.  They are put there atomatically by the grading tool.
You can find instructions on how to work on a homework on Canvas.  Here is a short summary:

### Submitting your work

To submit your work:

* First, click on "Runtime > Restart and run all", and check that you get no errors.  This enables you to catch any error you might have introduced, and not noticed, due to your running cells out of order.
* Second, download the notebook in .ipynb format (File > Download .ipynb) and upload the .ipynb file to [this form](https://docs.google.com/forms/d/e/1FAIpQLSe7oq8KxzdbDKmeKBWaK--qBF04zuXcqumX8B3KikU_RncWPg/viewform?usp=sf_link). This homework is due by 11:59pm on Friday 21 January 2022.

You can submit multiple times; the last submission before the deadline is the one that counts.

### Homework format

For each question in this notebook, there is:

* A text description of the problem.
* One or more places where you have to insert your solution.  You need to complete every place marked:

    `# YOUR CODE HERE`
    
    and you should not modify any other place.
* One or more test cells.  Each cell is worth some number of points, marked at the top.  You should not modify these tests cells.  The tests pass if no error is printed out: when there is a statement that says, for instance:

    `assert x == 2`
    
    then the test passes if `x` has value 2, and fails otherwise.  You can insert a `print(x)` (for this case!) somewhere if you want to debug your work; it is up to you.  
    
### Notes:

* Your code will be tested both according to the tests you can see (the `assert` statements you can see), _and_ additional tests.  This prevents you from hard-coding the answer to the particular questions posed.  Your code should solve the _general_ intended case, not hard-code the particular answer for the values used in the tests.

* **Please do not delete or add cells!** The test is autograded, and if you modify the test by adding or deleting cells, even if you re-add cells you delete, you may not receive credit.

* **Please do not import modules that are not part of the [standard library](https://docs.python.org/3/library/index.html).** You do not need any, and they will likely not available in the grading environment, leading your code to fail.

* **If you are inactive too long, your notebook might get disconnected from the back-end.** Your work is never lost, but you have to re-run all the cells before you continue.

* You can write out print statements in your code, to help you test/debug it. But remember: the code is graded on the basis of what it outputs or returns, not on the basis of what it prints.

* **TAs and tutors have access to this notebook,** so if you let them know you need their help, they can look at your work and give you advice.

### Grading

Each cell where there are tests is worth a certain number of points.  You get the points allocated to a cell only if you pass _all_ the tests in the cell.

The tests in a cell include both the tests you can see, and other, similar, tests that are used for grading only.  Therefore, you cannot hard-code the solutions: you really have to solve the essence of the problem, to receive the points in a cell.

### Code of Conduct

* Work on the test yourself, alone.
* You can search documentation on the web, on sites such as the Python documentation sites, Stackoverflow, and similar, and you can use the results.
* You cannot share your work with others or solicit their help.

## Problem 1
### Write a generator for the Fibonacci Numbers

Build a generator that returns the [Fibonacci numbers](https://en.wikipedia.org/wiki/Fibonacci_number): 0, 1, 1, 2, 3, 5, and so on.
"""

def fibonacci_generator():
    """Generates all Fibonacci numbers."""

    prevNumber = 1
    prevNumber2 = -1

    while True:

      currentNumber = prevNumber + prevNumber2
      return currentNumber

## Here you can test your code.
for n in fibonacci_generator():
  print(n)
  if n > 200:
    break

# Visible tests: 5 points

r = []
for n in fibonacci_generator():
    r.append(n)
    if n > 100:
        break
assert r == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]

# Hidden tests, 5 points

# These tests check basically that you generate Fibonacci numbers, forever -- without stopping.
# It is the reader (the user) of the function that decides when to stop.

"""## Problem 2
### Write a prime number generator

Write a generator that returns all the prime numbers.  The idea is to loop over all positive integers, test each one to see if it is prime, and if it is, `yield` it.
"""

# My solution is simple and not particularly optimized,
# and it is 12 lines long.

def prime_number_generator():
    """This generator returns all prime numbers."""
    #1 is not a prime number, I started with 2 as the first postive prime number
    number = 2
    while True:

      if number != 2 and number % 2 == 0 :
        number +=1
        continue
      if number != 3 and number % 3 == 0  :
        number +=1
        continue
      if number != 5 and number % 5 == 0 :
        number +=1
        continue
      if number != 7 and number % 7 == 0 :
        number +=1
        continue
      else:
        yield number
        number +=1

## Here you can test your code.
for i in prime_number_generator():
  print (i)
  if i > 300:
    break

## Visible tests: 5 points

initial_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]

idx = 0
for p in prime_number_generator():
    assert p == initial_primes[idx]
    idx += 1
    if idx == len(initial_primes):
        break

## Hidden tests: 10 points

# We test that the generator goes on and on and on.